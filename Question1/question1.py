# -*- coding: utf-8 -*-
"""Question1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a1zRiwmNcRlOItnOQe6IisuGybKrqosI
"""

"""
Question-1: File Encryption and Decryption with Verification
Description:
    This program reads text from "raw_text.txt", encrypts the content
    based on custom rules using two user-provided shift values (shift1, shift2),
    and writes the encrypted text to "encrypted_text.txt". It then decrypts
    the encrypted text back into "decrypted_text.txt" and verifies whether
    the decrypted text matches the original content.
"""

import json

#Encryption function
def encrypt_char(ch: str, shift1: int, shift2: int) -> tuple[str, str]:
    """
    Encrypt a single character.
    Returns: (encrypted_char, rule_tag)
    """
    if 'a' <= ch <= 'm':  # lowercase first half
        return (chr((ord(ch) - ord('a') + (shift1 * shift2)) % 26 + ord('a')), "lower1")
    elif 'n' <= ch <= 'z':  # lowercase second half
        return (chr((ord(ch) - ord('a') - (shift1 + shift2)) % 26 + ord('a')), "lower2")
    elif 'A' <= ch <= 'M':  # uppercase first half
        return (chr((ord(ch) - ord('A') - shift1) % 26 + ord('A')), "upper1")
    elif 'N' <= ch <= 'Z':  # uppercase second half
        return (chr((ord(ch) - ord('A') + (shift2 ** 2)) % 26 + ord('A')), "upper2")
    else:
        return (ch, "other")  # numbers, spaces, punctuation remain unchanged

def encrypt_text(text: str, shift1: int, shift2: int) -> str:
    """
    Encrypt entire text and store rule for each character.
    Returns JSON string.
    """
    encrypted_data = [ {"char": enc, "rule": rule} for enc, rule in (encrypt_char(c, shift1, shift2) for c in text) ]
    return json.dumps(encrypted_data, ensure_ascii=False)

# Decryption function
def decrypt_char(ch: str, rule: str, shift1: int, shift2: int) -> str:
    """
    Decrypt a character using its stored encryption rule.
    """
    if rule == "lower1":
        return chr((ord(ch) - ord('a') - (shift1 * shift2)) % 26 + ord('a'))
    elif rule == "lower2":
        return chr((ord(ch) - ord('a') + (shift1 + shift2)) % 26 + ord('a'))
    elif rule == "upper1":
        return chr((ord(ch) - ord('A') + shift1) % 26 + ord('A'))
    elif rule == "upper2":
        return chr((ord(ch) - ord('A') - (shift2 ** 2)) % 26 + ord('A'))
    else:
        return ch

def decrypt_text(encrypted_json: str, shift1: int, shift2: int) -> str:
    """
    Decrypt a full JSON string of encrypted data.
    """
    encrypted_data = json.loads(encrypted_json)
    return ''.join(decrypt_char(item["char"], item["rule"], shift1, shift2) for item in encrypted_data)

# File Handling
def encrypt_file(input_file: str, output_file: str, shift1: int, shift2: int):
    with open(input_file, "r", encoding="utf-8") as f:
        text = f.read()
    encrypted_json = encrypt_text(text, shift1, shift2)
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(encrypted_json)

def decrypt_file(input_file: str, output_file: str, shift1: int, shift2: int):
    with open(input_file, "r", encoding="utf-8") as f:
        encrypted_json = f.read()
    decrypted_text = decrypt_text(encrypted_json, shift1, shift2)
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(decrypted_text)

def verify_files(file1: str, file2: str) -> bool:
    with open(file1, "r", encoding="utf-8") as f1, open(file2, "r", encoding="utf-8") as f2:
        return f1.read() == f2.read()

# Main Program
def main():
    shift1 = int(input("Enter shift1 value: "))
    shift2 = int(input("Enter shift2 value: "))

    raw_file = "raw_text.txt"
    encrypted_file = "encrypted_text.txt"
    decrypted_file = "decrypted_text.txt"

    # Encrypt function call
    encrypt_file(raw_file, encrypted_file, shift1, shift2)
    print(f"Encryption complete. Encrypted content written to {encrypted_file}")

    # Decrypt function call
    decrypt_file(encrypted_file, decrypted_file, shift1, shift2)
    print(f"Decryption complete. Decrypted content written to {decrypted_file}")

    # Verifying raw file and decrypted file
    if verify_files(raw_file, decrypted_file):
        print("Verification successful: Decryption matches the original text.")
    else:
        print("Verification failed: Decryption does not match the original text.")

if __name__ == "__main__":
    main()